import{_ as r,M as i,p as t,q as h,Q as a,t as e,N as s,U as n,a1 as o}from"./framework-fb92cdbb.js";const p={},u=o('<div class="custom-container warning"><p class="custom-container-title">说明</p><p>变量使用 {} 包裹，真实环境需要根据实际情况进行修改！</p></div><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="容器-container" tabindex="-1"><a class="header-anchor" href="#容器-container" aria-hidden="true">#</a> 容器-Container</h3>',3),f={href:"https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504",target:"_blank",rel:"noopener noreferrer"},g=a("ul",null,[a("li",null,"一个可运行的镜像的实例。可以通过Docker API或者CIL创建、开启、关闭、移动或者删除一个容器"),a("li",null,"可以运行在本地机器、需你机器或者部署到云服务器上"),a("li",null,"轻便快捷（可以运行在任意操作系统中）"),a("li",null,"与其他容器相互隔离，运行自己的软件，二进制以及配置")],-1),E=a("h3",{id:"镜像-image",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#镜像-image","aria-hidden":"true"},"#"),e(" 镜像-Image")],-1),F=a("p",null,"运行容器时，它使用孤立的文件系统。此自定义文件系统由容器镜像提供。由于镜像包含容器的文件系统，因此它必须包含运行应用程序所需的所有内容——所有依赖项、配置、脚本、二进制文件等。该镜像还包含容器的其他配置，例如环境变量、要运行的默认命令和其他元数据。",-1),k=a("h2",{id:"windows推荐安装-wsl",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#windows推荐安装-wsl","aria-hidden":"true"},"#"),e(" Windows推荐安装 WSL")],-1),y={href:"https://docs.docker.com/get-docker/",target:"_blank",rel:"noopener noreferrer"},D=a("code",null,"Windows Subsystem for Linux",-1),b=a("p",null,"WSL2 使用虚拟化技术在轻量级虚拟机 (VM) 中运行 Linux 内核，同时保留了WSL1的操作体验，可以把通过 WSL2 启动的 Linux 系统认为是虚拟机中的一个 Linux 系统，因此，相对于通过用户模式和内核模式组件构成兼容性底层来运行Linux的WSL1来说，WSL2 的 Linux 系统更完整，功能更完善。例如，WSL1 不支持 Docker，而 WSL2 可以以原生的方式运行 Docker。",-1),_={href:"https://learn.microsoft.com/zh-cn/windows/wsl/install",target:"_blank",rel:"noopener noreferrer"},m=a("img",{src:"https://cdn.porridge.fun/blog/docker/common/wsl.png$fix.water",alt:"docker 开启wsl2"},null,-1),x=o(`<h2 id="帮助启动类命令" tabindex="-1"><a class="header-anchor" href="#帮助启动类命令" aria-hidden="true">#</a> 帮助启动类命令</h2><h3 id="查看docker服务状态" tabindex="-1"><a class="header-anchor" href="#查看docker服务状态" aria-hidden="true">#</a> 查看docker服务状态</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">systemctl status docker</span></span>
<span class="line"></span></code></pre></div><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动" aria-hidden="true">#</a> 启动</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">systemctl start docker</span></span>
<span class="line"></span></code></pre></div><h3 id="停止" tabindex="-1"><a class="header-anchor" href="#停止" aria-hidden="true">#</a> 停止</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">systemctl stop docker</span></span>
<span class="line"></span></code></pre></div><h3 id="重启" tabindex="-1"><a class="header-anchor" href="#重启" aria-hidden="true">#</a> 重启</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">systemctl restart docker</span></span>
<span class="line"></span></code></pre></div><h3 id="状态查看" tabindex="-1"><a class="header-anchor" href="#状态查看" aria-hidden="true">#</a> 状态查看</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">systemctl status docker</span></span>
<span class="line"></span></code></pre></div><h3 id="版本信息查看" tabindex="-1"><a class="header-anchor" href="#版本信息查看" aria-hidden="true">#</a> 版本信息查看</h3>`,12),v=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker -v")]),e(`
`),a("span",{class:"line"})])])],-1),C=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker version")]),e(`
`),a("span",{class:"line"})])])],-1),w=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker info")]),e(`
`),a("span",{class:"line"})])])],-1),L=a("h3",{id:"帮助信息查看",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#帮助信息查看","aria-hidden":"true"},"#"),e(" 帮助信息查看")],-1),S=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker --help")]),e(`
`),a("span",{class:"line"})])])],-1),O=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker {keyword} --help")]),e(`
`),a("span",{class:"line"})])])],-1),W=o(`<h2 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令" aria-hidden="true">#</a> 镜像命令</h2><h3 id="列出镜像列表" tabindex="-1"><a class="header-anchor" href="#列出镜像列表" aria-hidden="true">#</a> 列出镜像列表</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker images </span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">OPTIONS</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> </span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">ARGS</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"></span></code></pre></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li><code>[OPTIONS]</code>: 可以通过<code>docker images --help</code>查看帮助</li><li><code>-a</code>: <code>-all</code>的简写，即列出所有本地所有镜像</li><li><code>-q</code>: 只显示镜像id</li><li><code>[ARGS]</code>: 可以直接写镜像名，比如<code>centos</code>、<code>nginx</code>等</li></ul></div><h3 id="在远程仓库中搜索某个镜像" tabindex="-1"><a class="header-anchor" href="#在远程仓库中搜索某个镜像" aria-hidden="true">#</a> 在远程仓库中搜索某个镜像</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker search </span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">OPTIONS</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> {image name}</span></span>
<span class="line"></span></code></pre></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li><code>[OPTIONS]</code>: 可以通过<code>docker search --help</code>查看帮助</li><li><code>--limit int</code>: 只列出<code>int</code>个镜像，默认为25</li></ul></div><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker search --limit 3 nginx</span></span>
<span class="line"></span></code></pre></div><h3 id="从远程仓库下载某个镜像" tabindex="-1"><a class="header-anchor" href="#从远程仓库下载某个镜像" aria-hidden="true">#</a> 从远程仓库下载某个镜像</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker pull {image name}</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">:TAG</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"></span></code></pre></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li>不写TAG默认就是最新版<code>:latest</code></li></ul></div><h3 id="查看镜像详细信息" tabindex="-1"><a class="header-anchor" href="#查看镜像详细信息" aria-hidden="true">#</a> 查看镜像详细信息</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker inspect {image name}</span></span>
<span class="line"></span></code></pre></div><h3 id="查看镜像-容器-数据卷所占的空间" tabindex="-1"><a class="header-anchor" href="#查看镜像-容器-数据卷所占的空间" aria-hidden="true">#</a> 查看镜像/容器/数据卷所占的空间</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker system df</span></span>
<span class="line"></span></code></pre></div><h3 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像" aria-hidden="true">#</a> 删除镜像</h3>`,16),I=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker rmi -f {image id}")]),e(`
`),a("span",{class:"line"})])])],-1),N=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker rmi -f {image name}:{tag name} {image name}:{tag name}")]),e(`
`),a("span",{class:"line"})])])],-1),T=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker rmi -f "),a("span",{style:{color:"#ECEFF4"}},"$("),a("span",{style:{color:"#A3BE8C"}},"docker images -qa"),a("span",{style:{color:"#ECEFF4"}},")")]),e(`
`),a("span",{class:"line"})])])],-1),G=o(`<h3 id="拉取镜像" tabindex="-1"><a class="header-anchor" href="#拉取镜像" aria-hidden="true">#</a> 拉取镜像</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker pull {image name}</span></span>
<span class="line"></span></code></pre></div><h2 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令" aria-hidden="true">#</a> 容器命令</h2><h3 id="创建-启动" tabindex="-1"><a class="header-anchor" href="#创建-启动" aria-hidden="true">#</a> 创建+启动</h3>`,4),P=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker run "),a("span",{style:{color:"#ECEFF4"}},"["),a("span",{style:{color:"#D8DEE9FF"}},"OPTIONS"),a("span",{style:{color:"#ECEFF4"}},"]"),a("span",{style:{color:"#D8DEE9FF"}}," {image name} "),a("span",{style:{color:"#ECEFF4"}},"["),a("span",{style:{color:"#D8DEE9FF"}},"COMMAND"),a("span",{style:{color:"#ECEFF4"}},"]"),a("span",{style:{color:"#D8DEE9FF"}}," "),a("span",{style:{color:"#ECEFF4"}},"["),a("span",{style:{color:"#D8DEE9FF"}},"ARG..."),a("span",{style:{color:"#ECEFF4"}},"]")]),e(`
`),a("span",{class:"line"})])])],-1),A=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker run -d -p 80:80 -p 443:443 --name=default_site -v /home/default/page:/etc/nginx/html -v /home/default/nginx/conf.d:/etc/nginx/conf.d nginx")]),e(`
`),a("span",{class:"line"})])])],-1),V=o('<div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li><code>[OPTIONS]</code>: 大部分是一个<code>-</code>(例如<code>-p</code>、<code>-v</code>)，个别会是是两个<code>-</code>(例如<code>--name=</code>)</li><li><code>--name=</code>: 容器名称（不可与已存在容器同名），不指定该参数则会随机生成</li><li><code>-d</code>: <code>--detach</code>的简写，后台运行容器并返回容器id，即启动<code>守护式容器</code></li><li><code>-i</code>: <code>--interactive</code>的简写，以交互模式运行容器，通常搭配<code>-t</code>使用</li><li><code>-t</code>: <code>--tty</code>的简写，为容器重新分配一个伪输入终端，通常搭配<code>-i</code>使用，即启动<code>交互式容器</code>（前台有伪终端，等待交互）</li><li><code>-p</code>: 指定端口映射，<code>:</code>分隔(分隔符左边为宿主机端口，右边为容器端口)</li><li><code>-v</code>: <code>--volume</code>的简写，表示为容器指定一个外部的卷，<code>:</code>分隔(分隔符左边为宿主机磁盘目录，右边为容器内部目录)</li></ul></div><h3 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器" aria-hidden="true">#</a> 启动容器</h3>',2),q=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker run -it {image name} /bin/bash")]),e(`
`),a("span",{class:"line"})])])],-1),B=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker run -d {image name}")]),e(`
`),a("span",{class:"line"})])])],-1),M=o(`<h3 id="列出所有正在运行的容器" tabindex="-1"><a class="header-anchor" href="#列出所有正在运行的容器" aria-hidden="true">#</a> 列出所有正在运行的容器</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker ps </span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">OPTIONS</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"></span></code></pre></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li><code>-a</code>: 列出当前所有正在运行的容器+历史上运行过的容器</li><li><code>-l</code>: 显示最近创建的容器</li><li><code>-n</code>: 显示最近创建的n个容器</li><li><code>-q</code>: 静默模式，只显示容器编号</li></ul></div><h3 id="退出容器" tabindex="-1"><a class="header-anchor" href="#退出容器" aria-hidden="true">#</a> 退出容器</h3><h3 id="启动已停止运行的容器" tabindex="-1"><a class="header-anchor" href="#启动已停止运行的容器" aria-hidden="true">#</a> 启动已停止运行的容器</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker start {container id or container name}</span></span>
<span class="line"></span></code></pre></div><h3 id="重启容器" tabindex="-1"><a class="header-anchor" href="#重启容器" aria-hidden="true">#</a> 重启容器</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker restart {container id or container name}</span></span>
<span class="line"></span></code></pre></div><h3 id="停止容器" tabindex="-1"><a class="header-anchor" href="#停止容器" aria-hidden="true">#</a> 停止容器</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker stop {container id or container name}</span></span>
<span class="line"></span></code></pre></div><h3 id="强制停止容器" tabindex="-1"><a class="header-anchor" href="#强制停止容器" aria-hidden="true">#</a> 强制停止容器</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker </span><span style="color:#88C0D0;">kill</span><span style="color:#D8DEE9FF;"> {container id or container name}</span></span>
<span class="line"></span></code></pre></div><h3 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器" aria-hidden="true">#</a> 删除容器</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker rm {container id}</span></span>
<span class="line"></span></code></pre></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li>删除之前先停止容器</li></ul></div><h3 id="强制删除容器" tabindex="-1"><a class="header-anchor" href="#强制删除容器" aria-hidden="true">#</a> 强制删除容器</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker rm -f {container id}</span></span>
<span class="line"></span></code></pre></div><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li>容器运行时可以直接删除</li></ul></div><h3 id="进入容器后台" tabindex="-1"><a class="header-anchor" href="#进入容器后台" aria-hidden="true">#</a> 进入容器后台</h3><div class="language-bash" data-ext="sh"><pre class="shiki" style="background-color:#2e3440ff;"><code><span class="line"><span style="color:#D8DEE9FF;">docker </span><span style="color:#88C0D0;">exec</span><span style="color:#D8DEE9FF;"> -it -u {username} {container id}</span></span>
<span class="line"></span></code></pre></div><h3 id="设置容器开机自启动" tabindex="-1"><a class="header-anchor" href="#设置容器开机自启动" aria-hidden="true">#</a> 设置容器开机自启动</h3>`,21),R=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker run {image name} "),a("span",{style:{color:"#ECEFF4"}},"["),a("span",{style:{color:"#D8DEE9FF"}},"OPTIONS"),a("span",{style:{color:"#ECEFF4"}},"]"),a("span",{style:{color:"#D8DEE9FF"}}," --restart=always")]),e(`
`),a("span",{class:"line"})])])],-1),$=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"shiki",style:{"background-color":"#2e3440ff"}},[a("code",null,[a("span",{class:"line"},[a("span",{style:{color:"#D8DEE9FF"}},"docker update --restart=always {container id or container name}")]),e(`
`),a("span",{class:"line"})])])],-1);function z(Q,U){const d=i("ExternalLinkIcon"),l=i("CodeGroupItem"),c=i("CodeGroup");return t(),h("div",null,[u,a("p",null,[e("简单的说，容器是一个在你机器上运行的沙箱进程（sandboxed process），与主机上其他所有其他进程隔离。这种隔离技术的实现基于"),a("a",f,[e("Linux内核命名空间与cgroups（自备梯子）"),s(d)]),e("，该技术作为Linux的特色功能已存在了很久。Docker一直致力于普及这些功能。概括的说，一个容器是：")]),g,E,F,k,a("p",null,[e("在通过"),a("a",y,[e("Docker 官网安装指引"),s(d)]),e("安装好 Docker 环境之后，推荐安装WSL("),D,e(")，目前已升级到 WSL2 版本。")]),b,a("p",null,[e("WSL2 的安装可参考："),a("a",_,[e("使用 WSL 在 Windows 上安装 Linux"),s(d)]),e("。安装完成后在 Docker Desktop 中开启 WSL2选项： "),m]),x,s(c,null,{default:n(()=>[s(l,{title:"版本简略信息",active:""},{default:n(()=>[v]),_:1}),s(l,{title:"版本详细信息"},{default:n(()=>[C]),_:1}),s(l,{title:"概要信息"},{default:n(()=>[w]),_:1})]),_:1}),L,s(c,null,{default:n(()=>[s(l,{title:"总体帮助文档",active:""},{default:n(()=>[S]),_:1}),s(l,{title:"命令帮助文档"},{default:n(()=>[O]),_:1})]),_:1}),W,s(c,null,{default:n(()=>[s(l,{title:"单个删除",active:""},{default:n(()=>[I]),_:1}),s(l,{title:"批量删除"},{default:n(()=>[N]),_:1}),s(l,{title:"删除全部"},{default:n(()=>[T]),_:1})]),_:1}),G,s(c,null,{default:n(()=>[s(l,{title:"命令",active:""},{default:n(()=>[P]),_:1}),s(l,{title:"示例",active:""},{default:n(()=>[A]),_:1})]),_:1}),V,s(c,null,{default:n(()=>[s(l,{title:"交互式容器",active:""},{default:n(()=>[q]),_:1}),s(l,{title:"守护式容器"},{default:n(()=>[B]),_:1})]),_:1}),M,s(c,null,{default:n(()=>[s(l,{title:"新建容器",active:""},{default:n(()=>[R]),_:1}),s(l,{title:"已创建容器"},{default:n(()=>[$]),_:1})]),_:1})])}const H=r(p,[["render",z],["__file","common.html.vue"]]);export{H as default};
